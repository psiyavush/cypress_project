/// <reference types="cypress" />

// Welcome to Cypress!
//
// Этот файл спецификаций содержит различные примеры тестов
// для приложения списка дел, которые предназначены для демонстрации
// возможностей написания тестов в Cypress.
//
// Чтобы узнать больше о том, как работает Cypress и
// что делает его таким замечательным инструментом для тестирования,
// пожалуйста, ознакомьтесь с нашим руководством по началу работы:
// https://on.cypress.io/introduction-to-cypress

describe('example to-do app', () => {
  beforeEach(() => {
    // Cypress начинает каждый тест с чистого листа,
    // поэтому мы должны указать ему открыть наш веб-сайт с помощью команды cy.visit().
    // Поскольку мы хотим открывать один и тот же URL перед началом каждого теста,
    // мы включаем его в функцию beforeEach, чтобы она выполнялась перед каждым тестом.
    cy.visit('https://example.cypress.io/todo')
  })

  it('displays two todo items by default', () => {
    // Мы используем команду cy.get() для получения всех элементов, соответствующих селектору.
    // Затем, мы используем should, чтобы утверждать, что есть два совпадающих элемента,
    // которые представляют собой два изначальных элемента.
    cy.get('.todo-list li').should('have.length', 2)

    // Мы можем пойти дальше и проверить, что каждое изначальное дело содержит
    // правильный текст. Мы используем функции first и last
    // для получения только первого и последнего совпадающего элемента индивидуально,
    // а затем выполняем утверждение с помощью should.
    cy.get('.todo-list li').first().should('have.text', 'Pay electric bill')
    cy.get('.todo-list li').last().should('have.text', 'Walk the dog')
  })

  it('can add new todo items', () => {
    // Мы сохраним текст элемента в переменной, чтобы мы могли повторно использовать его.
    const newItem = 'Feed the cat'

    // Давайте получим элемент ввода и используем команду type,
    // чтобы ввести наш новый элемент списка. После ввода содержимого элемента,
    // нам нужно также ввести клавишу Enter, чтобы отправить ввод.
    // Этот ввод имеет атрибут data-test, поэтому мы будем использовать его для выбора
    // элемента в соответствии с лучшими практиками:
    // https://on.cypress.io/selecting-elements
    cy.get('[data-test=new-todo]').type(`${newItem}{enter}`)

    // Теперь, когда мы ввели наш новый элемент, давайте проверим, действительно ли он был добавлен в список.
    // Поскольку это самый новый элемент, он должен существовать как последний элемент в списке.
    // Кроме того, с двумя изначальными элементами, в списке должно быть всего 3 элемента.
    // Поскольку утверждения возвращают элемент, на котором было утверждение,
    // мы можем объединить оба этих утверждения в один оператор.
    cy.get('.todo-list li')
      .should('have.length', 3)
      .last()
      .should('have.text', newItem)
  })

  it('can check off an item as completed', () => {
    // Помимо использования команды get для получения элемента по селектору,
    // мы также можем использовать команду contains для получения элемента по его содержимому.
    // Однако это приведет к <label>, который является элементом самого низкого уровня, содержащим текст.
    // Чтобы проверить элемент, мы найдем элемент <input> для этого <label>
    // путем перемещения вверх по DOM к родительскому элементу. Затем мы можем find
    // дочерний элемент флажка <input> и использовать команду check чтобы отметить его.
    cy.contains('Pay electric bill')
      .parent()
      .find('input[type=checkbox]')
      .check()

    // Теперь, когда мы отметили флажок, мы можем продолжить и убедиться,
    // что элемент списка теперь отмечен как завершенный.
    // Снова мы используем contains для поиска элемента <label>, а затем используем команду parents
    // для перемещения на несколько уровней вверх по DOM, пока не найдем соответствующий элемент <li>.
    // После того, как мы получим этот элемент, мы можем утверждать, что у него есть класс completed.
    cy.contains('Pay electric bill')
      .parents('li')
      .should('have.class', 'completed')
  })

  context('with a checked task', () => {
    beforeEach(() => {
    // Мы возьмем команду, которую мы использовали выше для отметки элемента
    // Поскольку мы хотим выполнить несколько тестов, начинающихся с проверки
    // одного элемента, мы помещаем ее в beforeEach хук,
    // чтобы она запускалась в начале каждого теста.
      cy.contains('Pay electric bill')
        .parent()
        .find('input[type=checkbox]')
        .check()
    })

    it('can filter for uncompleted tasks', () => {
    // Мы нажмем на кнопку "active", чтобы
    // отобразить только незавершенные элементы
      cy.contains('Active').click()

      // После фильтрации, мы можем утверждать, что в списке есть только один
      // незавершенный элемент.
      cy.get('.todo-list li')
        .should('have.length', 1)
        .first()
        .should('have.text', 'Walk the dog')

      // Для надежности давайте также утверждать, что задача, которую мы отметили,
      // не существует на странице.
      cy.contains('Pay electric bill').should('not.exist')
    })

    it('can filter for completed tasks', () => {
      // Мы можем выполнить аналогичные шаги, как в тесте выше, чтобы убедиться,
      // что отображаются только завершенные задачи.
      cy.contains('Completed').click()

      cy.get('.todo-list li')
        .should('have.length', 1)
        .first()
        .should('have.text', 'Pay electric bill')

      cy.contains('Walk the dog').should('not.exist')
    })

    it('can delete all completed tasks', () => {
      // Сначала давайте нажмем кнопку "Очистить завершенные"
      // contains здесь фактически выполняет две функции.
      // Во-первых, он гарантирует, что кнопка существует в DOM.
      // Эта кнопка появляется только тогда, когда хотя бы одна задача отмечена
      // поэтому эта команда неявно проверяет, что она существует.
      // Во-вторых, она выбирает кнопку, чтобы мы могли нажать на нее.
      cy.contains('Clear completed').click()

      // Затем мы можем убедиться, что в списке есть только один элемент
      // и наш элемент не существует.
      cy.get('.todo-list li')
        .should('have.length', 1)
        .should('not.have.text', 'Pay electric bill')

      // Наконец, убедимся, что кнопка "Очистить" больше не существует.
      cy.contains('Clear completed').should('not.exist')
    })
  })
})
